{"version":3,"sources":["Components/item-categories.js","Components/StyledSubFilters.js","Components/utils.js","Components/ItemCard.js","Components/arcane/ArcaneRank.js","Components/StyledImage.js","Components/StyledItemList.js","controllers/itemDataController.js","Components/arcane/Arcane.js","Components/ItemDetailCard.js","Components/archwing/Archwing.js","Components/fish/Fish.js","Components/GenericItem.js","Components/mod/ModStyles.js","Components/mod/ModFilter.js","Components/mod/Mods.js","Components/secondary/SecondaryWeapons.js","Components/ItemBuildComponent.js","Components/sentinel/Sentinels.js","controllers/routesController.js","Components/homepage/Homepage.js","index.js"],"names":["itemCategories","StyledFilters","styled","section","CDNBase","ItemCard","li","ItemMain","main","StyledArcanerank","div","ArcaneRank","props","level","levelDescription","stats","className","StyledImage","img","StyledItemList","ul","deDupeItems","items","deDupedItems","forEach","item","hasOwnProperty","name","Object","values","listItems","componentName","itemKey","map","Component","stripLineSeparatorTags","string","replace","getFilterProps","propName","length","propsList","Set","mod","add","sort","stripDamageTypeTags","data","useItemsData","category","processingFunctions","useState","itemCount","setItemCount","setItems","useEffect","isMounted","axios","get","then","response","itemData","JSON","stringify","parse","fn","ArcaneCard","levelStats","imageName","alt","src","ranks","Ranks","undefined","Array","isArray","entries","idx","Arcanes","itemDataController","ItemDetailCard","Archwing","abilities","description","Abilities","ability","Ability","Archwings","FishCard","Fish","GenericItem","GenericItems","ModCard","StyledFusionLevels","ModFilter","value","onChange","defaultOption","options","option","ModList","modKey","fusionLimit","Mod","backgroundImageUrl","figureStyle","color","backgroundImage","backgroundRepeat","backgroundPosition","FusionLevels","apply","modLevels","maxModLevelIndex","maxModLevelStats","stat","rarity","toLowerCase","style","uniqueName","Mods","mods","deDupedMods","modLookupKey","filteredItems","setFilteredItems","keywordFilter","setKeywordFilter","polarityFilter","setPolarityFilter","rarityFilter","setRarityFilter","typeFilter","setTypeFilter","polarityFilterOptions","setPolarityFilterOptions","typeFilterOptions","setTypeFilterOptions","rarityFilterOptions","setRarityFilterOptions","modPolarities","modTypes","modRarities","subSet","slice","filter","polarity","filterItemsByPolarity","filterItemsByRarity","type","filterItemsByType","includes","filterItemsByKeyword","modFilters","event","target","placeholder","e","onClick","WeaponTypeFilter","filters","WeaponMasterRankFilter","WeaponNoiseFilter","WeaponFilter","getWeaponFilterOptions","weapons","property","weapon","a","b","Number","SecondaryWeaponCard","SecondaryWeapons","ItemBuildComponent","SentinelCard","armor","components","ManufacturingRequirements","component","ManufacturingRequirement","title","routes","App","handleFilterChange","filterType","state","setState","filterProps","categories","jsonLoaded","this","categoryOptions","basename","for","to","route","RouteWithSubRoutes","key","React","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1883a761.chunk.js","sourcesContent":["export const itemCategories = [\n    'Arcanes',\n    'Archwing',\n    'Arch-Gun',\n    'Arch-Melee',\n    'Enemy',\n    'Fish',\n    'Gear',\n    'Glyphs',\n    'Melee',\n    'Misc',\n    'Mods',\n    'Pets',\n    'Primary',\n    'Quests',\n    'Relics',\n    'Resources',\n    'Secondary',\n    'Sentinels',\n    'Skins',\n    'Warframes'\n];\n","import styled from 'styled-components';\n\nconst StyledFilters = styled.section`\n    border: 1px solid #7F7A82;\n    border-left:4px solid;\n    border-radius:4px;\n    background: #28282A;\n    color: #FFF;\n    margin: 10px;\n    padding: 1em;\n\n    button,\n    input,\n    select {\n        border-radius: 10px;\n        margin: 0 10px;\n        padding: 0.5em 1em;\n    }\n\n    button {\n        background-color: #F1E9B3;\n        cursor: pointer;\n    }\n`\n\nexport default StyledFilters;\n","const CDNBase = 'https://cdn.warframestat.us/img/';\n\nconst validItemsList = (items, category) => {\n    return items.length && items[0].category.toLowerCase() === category;\n}\n\nexport { CDNBase, validItemsList };\n\n\n","import styled from 'styled-components';\n\nconst ItemCard = styled.li`\n    background: #070713;\n    border: 1px solid #B5924E;\n    border-bottom: 10px solid #F1E9B3;\n    border-radius: 5px;\n    box-shadow: inset 0 0 100px rgba(199,178,110,0.3);\n    color: #F8F5CB;\n    margin: 10px;\n    max-width: 256px;\n    overflow:hidden;\n    position: relative;\n    text-align: center;\n\n    h1 {\n        padding: 0 0.5em;\n    }\n\n    p {\n        padding: 1em;\n    }\n`;\n\nconst ItemMain = styled.main`\n    padding: 1em;\n\n    @media (min-width: 1024px) {\n        flex-wrap: nowrap;\n    }\n`\nexport { ItemMain, ItemCard };\n","import styled from \"styled-components\";\n\nconst StyledArcanerank = styled.div`\n    .rank-container {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n    }\n\n    .rank-outer {\n        border: 2px solid #C7C5A8;\n        height: 2em;\n        transform: rotate(45deg);\n        width: 2em;\n        text-align: center;\n    }\n    \n    .rank-inner {\n        height: 2em;\n        width: 2em;\n        line-height: 2em;\n        transform: rotate(-45deg);\n    }\n\n    .description {\n        padding: 1em;\n    }\n`\n\nconst ArcaneRank = (props) => {\n    const level = props[0];\n    const levelDescription = props[1].stats[0];\n    return (\n        <StyledArcanerank>\n\n            <div className=\"rank-container\">\n                <div className=\"rank-outer\">\n                    <div className=\"rank-inner\">{level}</div>\n                </div>\n            \n                <div className=\"description\">\n                    {levelDescription}\n                </div>\n            </div>\n        </StyledArcanerank>\n    )\n}\nexport default ArcaneRank;","import styled from \"styled-components\";\n\nconst StyledImage = styled.img`\n    background: rgba(77, 75, 84, 0.3);\n    border: 2px solid #28282A;\n    max-width: 100%;\n`;\n\nexport default StyledImage;\n","import styled from 'styled-components';\n\nconst StyledItemList = styled.ul`\n    display: flex;\n    list-style-type: none;\n    flex-wrap: wrap;\n    justify-content: center;\n`\n\nexport default StyledItemList;","import axios from 'axios';\nimport React, {useEffect, useState} from 'react';\n\n/**\n * Some categories of item (e.g. Fish) have multiple entries for a single type of item to accomodate\n * for item size variations.  This would clutter up the search results, so there needs to be a method\n * for removing duplicate items.\n *\n * @param {array} items\n */\nexport function deDupeItems(items) {\n    let deDupedItems = {};\n    // TODO: Change from an array search to a hashmap.\n    items.forEach((item) => {\n        if (!deDupeItems.hasOwnProperty(item.name)) {\n            deDupedItems[item.name] = item;\n        }\n    })\n    return Object.values(deDupedItems);\n}\n\nexport function listItems(items, componentName, itemKey = 'uniqueName') {\n    return items.map(item => {\n        const Component = componentName;\n        return (\n            <Component key={item[itemKey]} {...item}/>\n        )\n    })\n}\n\nexport function stripLineSeparatorTags(string) {\n    const regex = /<LINE_SEPARATOR>/gi\n    return string.replace(regex, '');\n}\n\n/**\n * Populate an array of properties than can be used to filter Mods.\n *\n * @param {array} mods\n * @param {string} propName\n */\nexport function getFilterProps(items, propName) {\n    if (!items || !items.length) {\n        return [];\n    }\n\n    let propsList = new Set();\n\n    items.forEach(mod => {\n        propsList.add(mod[propName])\n    });\n\n    return [...propsList].sort();\n}\n\nexport async function getItemDataByCategory(category) {\n    const dataFileUrl = `${window.location.href}/data/${category}.json`;\n    axios.get(dataFileUrl)\n        .then(response => {\n            return response.text();\n        })\n        .then(response => {\n            response = stripLineSeparatorTags(response);\n            response = stripDamageTypeTags(response);\n            return JSON.parse(response);\n        })\n        .catch((error) => {\n            console.error('Error:', error);\n        });\n}\n\nexport function stripDamageTypeTags(data) {\n    const regex = /<DT_([a-z]*)>/gi\n    return data.replace(regex, '');\n}\n\n\nexport function useItemsData(category, processingFunctions = []) {\n    const [itemCount, setItemCount] = useState(0);\n    const [items, setItems] = useState([]);\n    useEffect(() => {\n        if (!category) {\n            return;\n        }\n\n        let isMounted = true;\n        axios.get(`/warframe-dashboard/data/${category}.json`)\n            .then(response => {\n                if (isMounted) {\n                    let itemData = JSON.stringify(response.data);\n                    itemData = stripDamageTypeTags(itemData);\n                    itemData = stripLineSeparatorTags(itemData);\n                    itemData = JSON.parse(itemData);\n                    itemData = deDupeItems(itemData);\n\n                    if (processingFunctions) {\n                        processingFunctions.forEach(fn => {\n                            itemData = fn(itemData)\n                        })\n                    }\n\n                    setItems(itemData);\n                    setItemCount(itemData.length);\n                }\n            })\n\n            return () => { isMounted = false };\n    }, [itemCount, category, processingFunctions]);\n\n    return items;\n}","import { CDNBase } from '../utils';\nimport { ItemMain, ItemCard } from '../ItemCard';\nimport ArcaneRank from './ArcaneRank';\nimport StyledImage from '../StyledImage';\nimport StyledItemList from '../StyledItemList';\nimport * as itemDataController from '../../controllers/itemDataController';\n\nfunction Arcanes({category}) {\n    const items = itemDataController.useItemsData(category);\n\n    return (\n        <StyledItemList>\n            {itemDataController.listItems(items, ArcaneCard)}\n        </StyledItemList>\n    )\n}\n\nconst ArcaneCard = ({levelStats, imageName, name}) => {\n    if (name === 'Arcane') {\n        return null;\n    }\n\n    return (\n        <ItemCard>\n            <StyledImage alt=\"\" src={CDNBase + imageName}/>\n            <ItemMain>\n                <h1>{name}</h1>\n                <div className=\"item-details\">\n                    <Ranks ranks={levelStats} />\n                </div>\n            </ItemMain>\n        </ItemCard>\n    )\n}\n\nconst Ranks = ({ranks}) => {\n    if (ranks === undefined) {\n        return null;\n    }\n\n    const levels = Array.isArray(Object.entries(ranks)) ? Object.entries(ranks) : [];\n    const rankDetails = levels.map((level, idx) => {\n        return <ArcaneRank key={idx} {...level} />\n    })\n\n    return rankDetails\n}\n\nexport default Arcanes;\n","import styled from 'styled-components';\n\nconst ItemDetailCard = styled.div`\n    border: 1px solid #7F7A82;\n    border-left:4px solid;\n    border-radius:4px;\n    background: #28282A;\n    margin: 0 0 1em;\n    padding: 1em;\n\n    h2 {\n        margin: 0;\n    }\n`\n\nexport default ItemDetailCard;\n","import { CDNBase } from '../utils';\nimport { ItemCard } from '../ItemCard';\nimport ItemDetailCard from '../ItemDetailCard';\nimport StyledImage from '../StyledImage';\nimport StyledItemList from '../StyledItemList';\nimport * as itemDataController from '../../controllers/itemDataController';\n\nfunction Archwings({category}) {\n    const items = itemDataController.useItemsData(category);\n\n    return (\n        <StyledItemList>\n            {itemDataController.listItems(items, Archwing)}\n        </StyledItemList>\n    )\n}\n\nconst Archwing = ({abilities, description, imageName, name}) => {\n    return (\n        <ItemCard>\n            <StyledImage alt=\"\" src={CDNBase + imageName}/>\n            <h1>{name}</h1>\n            <p>{description}</p>\n            <h3>Abilities</h3>\n            <Abilities abilities={abilities} />\n        </ItemCard>\n    )\n}\n\nconst Abilities = ({abilities}) => {\n    if (abilities === undefined) {\n        return null;\n    }\n\n    return abilities.map((ability) => {\n        return <Ability key={ability.name} {...ability} />\n    })\n}\n\nconst Ability = ({description, name}) => {\n    return (\n        <ItemDetailCard key={name}>\n            <h2>{name}</h2>\n            <p>{description}</p>\n        </ItemDetailCard>\n    )\n}\n\nexport default Archwings;\n","import { CDNBase } from '../utils';\nimport { ItemCard } from '../ItemCard';\nimport StyledImage from '../StyledImage';\nimport StyledItemList from '../StyledItemList';\nimport * as itemDataController from '../../controllers/itemDataController';\n\nfunction Fish({category}) {\n    const items = itemDataController.useItemsData(category);\n\n    return (\n        <StyledItemList>\n            {itemDataController.listItems(items, FishCard)}\n        </StyledItemList>\n    )\n}\n\nconst FishCard = ({description, imageName, name}) => {\n    return (\n        <ItemCard>\n            <StyledImage alt=\"\" src={CDNBase + imageName}/>\n            <h1>{name}</h1>\n            <p>{description}</p>\n        </ItemCard>\n    )\n}\n\nexport default Fish;\n","import { CDNBase } from './utils';\nimport { ItemCard } from './ItemCard';\nimport StyledImage from './StyledImage';\nimport StyledItemList from './StyledItemList';\nimport * as itemDataController from '../controllers/itemDataController';\n\nconst GenericItems = ({category}) => {\n    const items = itemDataController.useItemsData(category);\n\n    return (\n        <StyledItemList>\n            {itemDataController.listItems(items, GenericItem)}\n        </StyledItemList>\n    )\n}\n\nconst GenericItem = ({description, imageName, name}) => {\n    return (\n        <ItemCard>\n            <StyledImage alt=\"\" src={CDNBase + imageName}/>\n            <h1>{name}</h1>\n            <p>{description}</p>\n        </ItemCard>\n    )\n}\n\nexport default GenericItems;","import styled from 'styled-components';\nimport { ItemCard } from '../ItemCard';\n\nconst ModCard = styled(ItemCard)`\n    display:flex;\n    flex-basis: 256px;\n    justify-content: space-evenly;\n    flex-direction: column;\n    justify-content: space-between;\n\n    figure {\n        width: 100%;\n        height: 256px;\n    }\n\n    .stat {\n        padding: 2px 10px;\n    }\n\n    @media only screen and (max-width: 512px) {\n        flex-basis: 100%;\n\n        .figure {\n            height: auto;\n        }\n    }\n\n    &.common {\n        border-color: #9E7A5A #9E7A5A #DBB592\n    }\n\n    &.uncommon {\n        border-color: #BABABE #BABABE #FAFAFC\n    }\n\n    &.rare {\n        border-color: #B5924E #B5924E #F1E9B3\n    }\n`\n\nconst StyledFusionLevels = styled.ul`\n    display: flex;\n    gap: 0.5em;\n    justify-content: center;\n    list-style-type: none;\n    flex-wrap: wrap;\n    margin: 1em;\n\n    li {\n        border: 1px solid #5194B6;\n        background-color: #C2F2FF;\n        border-radius: 50%;\n        width: 8px;\n        height: 8px;\n    }\n`\n\nexport { ModCard, StyledFusionLevels }","const ModFilter = (props) => {\n    return (\n        <select name={props.name} value={props.value} onChange={props.onChange}>\n            <option key=\"default\" value=\"\">-- {props.defaultOption} --</option>;\n            {\n                props.options.map((option) => <option key={option} value={option}>{option}</option>)\n            }\n        </select>\n    )\n}\n\nexport default ModFilter\n","import React, {useEffect, useState} from 'react';\nimport { CDNBase } from '../utils';\nimport { ModCard, StyledFusionLevels } from './ModStyles';\nimport ModFilter from './ModFilter';\nimport StyledItemList from '../StyledItemList';\nimport * as itemDataController from '../../controllers/itemDataController';\nimport StyledFilters from '../StyledSubFilters';\n\nfunction Mods({category}) {\n    const scrubbedModData = (mods) => {\n        let deDupedMods = {};\n        mods.forEach(mod => {\n            const modLookupKey = `${mod.name}-fusion-levels-${mod.fusionLimit}`\n            if (!deDupedMods.hasOwnProperty(modLookupKey) && mod.levelStats) {\n                deDupedMods[modLookupKey] = mod;\n            }\n        })\n        return Object.values(deDupedMods);\n    }\n\n    const items = itemDataController.useItemsData(category, [scrubbedModData]);\n\n    const [filteredItems, setFilteredItems] = useState();\n\n    // Currently active filters\n    const [keywordFilter, setKeywordFilter] = useState('')\n    const [polarityFilter, setPolarityFilter] = useState('');\n    const [rarityFilter, setRarityFilter] = useState('');\n    const [typeFilter, setTypeFilter] = useState('');\n\n    // Filter options\n    const [polarityFilterOptions, setPolarityFilterOptions] = useState([]);\n    const [typeFilterOptions, setTypeFilterOptions] = useState([]);\n    const [rarityFilterOptions, setRarityFilterOptions] = useState([]);\n\n    useEffect(() => {\n        const modPolarities = itemDataController.getFilterProps(items, 'polarity');\n        setPolarityFilterOptions(modPolarities);\n\n        const modTypes = itemDataController.getFilterProps(items, 'type');\n        setTypeFilterOptions(modTypes);\n\n        const modRarities = itemDataController.getFilterProps(items, 'rarity');\n        setRarityFilterOptions(modRarities);\n    }, [items])\n\n    const filterItemsByPolarity = items => {\n        return items.filter(item => {\n            return item.polarity === polarityFilter\n        })\n    }\n\n    const filterItemsByRarity = items => {\n        return items.filter(item => {\n            return item.rarity === rarityFilter\n        })\n    }\n\n    const filterItemsByType = items => {\n        return items.filter(item => {\n            return item.type === typeFilter\n        })\n    }\n\n    const filterItemsByKeyword = items => {\n        return items.filter(item => {\n            return item.name.toLowerCase().includes(keywordFilter.toLowerCase());\n        })\n    }\n\n    useEffect(() => {\n        let filteredItems = [...items];\n        const noActiveFilters = !polarityFilter && !rarityFilter && !typeFilter && !keywordFilter;\n\n        if (noActiveFilters) {\n            const subSet = filteredItems.slice(0, 99);\n            setFilteredItems(subSet);\n            return;\n        }\n\n        if (polarityFilter) {\n            filteredItems = filterItemsByPolarity(filteredItems);\n        }\n\n        if (rarityFilter) {\n            filteredItems = filterItemsByRarity(filteredItems);\n        }\n\n        if (typeFilter) {\n            filteredItems = filterItemsByType(filteredItems);\n        }\n\n        if (keywordFilter) {\n            filteredItems = filterItemsByKeyword(filteredItems);\n        }\n        setFilteredItems(filteredItems);\n    }, [keywordFilter, polarityFilter, rarityFilter, typeFilter])\n\n\n    const resetFilters = () => {\n        setKeywordFilter('');\n        setPolarityFilter('');\n        setRarityFilter('');\n        setTypeFilter('');\n    }\n\n    const modFilters = [\n        {\n            defaultOption: 'Polarity',\n            options: polarityFilterOptions,\n            value: polarityFilter,\n            onChange: (event) => {\n                setPolarityFilter(event.target.value);\n            }\n        },\n        {\n            defaultOption: 'Type',\n            options: typeFilterOptions,\n            value: typeFilter,\n            onChange: (event) => {\n                setTypeFilter(event.target.value);\n            }\n        },\n        {\n            defaultOption: 'Rarity',\n            options: rarityFilterOptions,\n            value: rarityFilter,\n            onChange: (event) =>  {\n                setRarityFilter(event.target.value);\n            }\n        }\n    ]\n\n    return (\n        <>\n        <StyledFilters>\n            <label>Filter mods by:</label>\n            {\n                modFilters.map(filter => {\n                    return (\n                        <ModFilter\n                            key={filter.defaultOption}\n                            defaultOption={filter.defaultOption}\n                            name={filter.name}\n                            onChange={filter.onChange}\n                            options={filter.options}\n                            value={filter.value}\n                        />\n                    )\n                })\n            }\n            <input type=\"text\" placeholder=\"keyword\" name=\"keyword\" value={keywordFilter} onChange={(e) => setKeywordFilter(e.target.value)}/>\n            <button onClick={resetFilters}>Reset filters</button>\n        </StyledFilters>\n\n        <StyledItemList>\n            <ModList items={filteredItems}/>\n        </StyledItemList>\n        </>\n    )\n}\n\nconst ModList = ({items}) => {\n    if (!items) {\n        return [];\n    }\n\n    return items.map(mod => {\n        const modKey = `${mod.name}-limit-${mod.fusionLimit}`;\n        return (\n            <Mod key={modKey} {...mod}/>\n        )\n    })\n}\n\nconst Mod = (props) => {\n    const backgroundImageUrl = CDNBase + props.imageName;\n    const figureStyle = {\n        color: 'red',\n        backgroundImage: `url(\"${backgroundImageUrl}\")`,\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'top center',\n    }\n\n    const FusionLevels = (props) => {\n        let fusionLimit = Array.apply(null, Array(props.fusionLimit));\n        fusionLimit = fusionLimit.map((value, idx) => {\n            return <li key={idx}></li>\n        })\n\n        return <StyledFusionLevels>{fusionLimit}</StyledFusionLevels>\n    }\n\n    const modLevels = props.levelStats;\n    const maxModLevelIndex = modLevels !== undefined ? modLevels.length - 1 : false;\n    let maxModLevelStats = maxModLevelIndex ? modLevels[maxModLevelIndex].stats : [];\n    maxModLevelStats = maxModLevelStats.map((stat, idx) => <div className=\"stat\" key={idx}>{stat}</div>)\n\n    return (\n        <ModCard key={props.uniqueName} className={props.rarity.toLowerCase()}>\n            <figure style={figureStyle}></figure>\n            <h1>{props.name}</h1>\n            {maxModLevelStats}\n            <FusionLevels fusionLimit={props.fusionLimit}/>\n        </ModCard>\n    )\n}\n\nexport default Mods;","import { CDNBase } from '../utils';\nimport { ItemCard } from '../ItemCard';\nimport StyledImage from '../StyledImage';\nimport StyledItemList from '../StyledItemList';\nimport StyledFilters from '../StyledSubFilters';\nimport * as itemDataController from '../../controllers/itemDataController';\n\nconst SecondaryWeapons = ({category}) => {\n    const items = itemDataController.useItemsData(category);\n\n    return (\n        <>\n        <StyledFilters>\n            <WeaponTypeFilter options={getWeaponFilterOptions(items, 'type')}/>\n            <WeaponNoiseFilter options={getWeaponFilterOptions(items, 'noise')}/>\n            <WeaponMasterRankFilter options={getWeaponFilterOptions(items, 'masteryReq')}/>\n        </StyledFilters>\n\n        <StyledItemList>\n            {itemDataController.listItems(items, SecondaryWeaponCard)}\n        </StyledItemList>\n        </>\n    )\n}\n\nconst WeaponTypeFilter = ({options}) => {\n    return (\n        <select>\n            <option value=''>-- Weapon type --</option>\n            <WeaponFilter filters={options}/>\n        </select>\n    )\n}\n\nconst WeaponMasterRankFilter = ({options}) => {\n    return (\n        <select>\n            <option value=''>-- Mastery Rank Required --</option>\n            <WeaponFilter filters={options}/>\n        </select>\n    )\n}\n\nconst WeaponNoiseFilter = ({options}) => {\n    return (\n        <select>\n            <option value=''>-- Noise level --</option>\n            <WeaponFilter filters={options}/>\n        </select>\n    )\n}\n\nconst WeaponFilter = ({filters}) => {\n    return filters.map(filter => {\n        return (\n            <option key={filter} value={filter}>{filter}</option>\n        )\n    })\n}\n\nconst getWeaponFilterOptions = (weapons, property) => {\n    let options = new Set();\n    weapons.forEach(weapon => {\n        options.add(weapon[property])\n    })\n\n    if (property === 'masteryReq') {\n        return [...options].sort((a, b) => {\n            return Number(a) - Number(b)\n        })\n    }\n\n    return [...options].sort();\n}\n\nconst SecondaryWeaponCard = ({description, imageName, name}) => {\n    return (\n        <ItemCard>\n            <StyledImage alt=\"\" src={CDNBase + imageName}/>\n            <h1>{name}</h1>\n            <p>{description}</p>\n        </ItemCard>\n    )\n}\n\nexport default SecondaryWeapons;\n","import styled from \"styled-components\";\n\nconst ItemBuildComponent = styled.div`\n    box-sizing: border-box;\n    display: inline-block;\n    max-width: 20%;\n    padding: 1em;\n`;\n\nexport default ItemBuildComponent;","import { CDNBase } from '../utils';\nimport { ItemCard } from '../ItemCard';\nimport ItemDetailCard from '../ItemDetailCard';\nimport StyledImage from '../StyledImage';\nimport StyledItemList from '../StyledItemList';\nimport ItemBuildComponent from '../ItemBuildComponent';\nimport * as itemDataController from '../../controllers/itemDataController';\n\nconst Sentinels = ({category}) => {\n    const items = itemDataController.useItemsData(category);\n\n    return (\n        <StyledItemList>\n            {itemDataController.listItems(items, SentinelCard)}\n        </StyledItemList>\n    )\n}\n\nconst SentinelCard = (props) => {\n    return (\n        <ItemCard>\n            <StyledImage alt=\"\" src={CDNBase + props.imageName} className=\"small\"/>\n            <h1>{props.name}</h1>\n            <p>{props.description}</p>\n            <p>Armor: {props.armor}</p>\n            <h3>Manufacturing Requirements</h3>\n            <ManufacturingRequirements components={props.components} />\n        </ItemCard>\n    )\n}\n\nconst ManufacturingRequirements = ({components, uniqueName}) => {\n    if (components === undefined) {\n        return null;\n    }\n\n    components = Object.entries(components);\n\n    return (\n        <ItemDetailCard key={uniqueName}>\n            {\n                components.map((component) => {\n                    return (\n                        <ManufacturingRequirement key={component[1].uniqueName} {...component} />\n                    )\n                })\n            }\n        </ItemDetailCard>\n    )\n}\n\nconst ManufacturingRequirement = (props) => {\n    const description = props[1].description;\n    return (\n        <ItemBuildComponent>\n            <p>{props[1].name} x {props[1].itemCount}</p>\n            <StyledImage title={description} alt={description} src={CDNBase + props[1].imageName}/>\n        </ItemBuildComponent>\n    )\n}\n\nexport default Sentinels;\n","import Arcanes from '../Components/arcane/Arcane';\nimport Archwings from '../Components/archwing/Archwing';\nimport Fish  from '../Components/fish/Fish';\nimport GenericItems from '../Components/GenericItem';\nimport Homepage from '../Components/homepage/Homepage';\nimport Mods from '../Components/mod/Mods';\nimport SecondaryWeapons from '../Components/secondary/SecondaryWeapons';\nimport Sentinels from '../Components/sentinel/Sentinels';\n\nexport const routes = [\n    {\n      'path': '/arcanes',\n      'component': Arcanes,\n    },\n    {\n      'path': '/archwing',\n      'component': Archwings,\n    },\n    {\n      'path': '/fish',\n      'component': Fish,\n    },\n    {\n      'path': '/mods',\n      'component': Mods,\n    },\n    {\n      'path': '/secondary',\n      'component': SecondaryWeapons,\n    },\n    {\n      'path': '/sentinels',\n      'component': Sentinels,\n    },\n    {\n      'path': '/',\n      'component': Homepage,\n      'exact': true,\n    },\n    {\n      'path': '/:generic',\n      'component': GenericItems,\n    }\n  ]","export default function Homepage() {\n    return (\n        <>\n            <h2>Homepage</h2>\n        </>\n    )\n}","/**\n * Huge credit and thanks to the Warframe community\n * https://github.com/WFCD\n * https://github.com/WFCD/warframe-items\n */\nimport React from 'react';\nimport ReactDOM  from 'react-dom';\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\n\nimport './index.css';\nimport { itemCategories } from './Components/item-categories';\nimport StyledFilters from './Components/StyledSubFilters';\nimport { routes } from './controllers/routesController';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: {},\n      filters: {\n        category: '',\n      },\n      filterProps: {\n        categories: itemCategories,\n      },\n      jsonLoaded: false,\n    }\n  }\n\n  handleFilterChange = filterType => (event) => {\n    let filters = this.state.filters;\n    filters[filterType] = event.target.value;\n    this.setState({\n      filters\n    });\n  }\n\n  render() {\n    let { filters } = this.state;\n    const { category } = filters;\n\n    const categoryOptions = itemCategories.map(category => {\n      return <option key={category} value={category}>{category}</option>\n    })\n\n    return (\n      <Router basename=\"/warframe-dashboard\">\n        <main>\n          <StyledFilters>\n              <label for=\"category\">Select an item category</label>\n              <select name=\"category\" value={category} onChange={this.handleFilterChange('category')}>\n                <option value=''>-- Category --</option>\n                {categoryOptions}\n              </select>\n              <Redirect to={category.toLowerCase()} />\n          </StyledFilters>\n\n          <Switch>\n            {\n              routes.map((route) => {\n                return <RouteWithSubRoutes {...route} key={category.toLowerCase()} category={category} />\n              })\n            }\n          </Switch>\n        </main>\n      </Router>\n    )\n  }\n}\n\n// A special wrapper for <Route> that knows how to\n// handle \"sub\"-routes by passing them in a `routes`\n// prop to the component it renders.\nfunction RouteWithSubRoutes(route) {\n  return (\n    <Route\n      path={route.path}\n      render={\n        props => {\n          return (\n            // pass the sub-routes down to keep nesting\n            <route.component {...props} {...route} />\n          )\n        }\n      }\n    />\n  )\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}