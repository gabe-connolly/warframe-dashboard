{"version":3,"sources":["Components/item-categories.js","Components/StyledSubFilters.js","Components/ItemCard.js","Components/arcane/ArcaneRank.js","Components/StyledItemList.js","controllers/itemDataController.js","Components/filters/filterComponents.js","Components/GenericItem.js","Components/arcane/Arcane.js","Components/ItemDetailCard.js","Components/archwing/Archwing.js","Components/mod/ModStyles.js","Components/ItemFilter.js","Components/mod/Mods.js","Components/ranged-weapons/RangedWeapons.js","Components/ranged-weapons/PrimaryWeapons.js","Components/ranged-weapons/SecondaryWeapons.js","Components/ItemBuildComponent.js","Components/sentinel/Sentinels.js","controllers/pagesController.js","Components/homepage/Homepage.js","index.js"],"names":["itemCategories","StyledFilters","styled","section","ItemCard","li","ItemMain","main","StyledArcanerank","div","ArcaneRank","props","level","levelDescription","stats","className","StyledItemList","ul","deDupeItems","items","deDupedItems","forEach","item","hasOwnProperty","name","Object","values","listItems","componentName","itemKey","map","Component","stripPhTag","string","replace","stripLineSeparatorTags","filterItemsByProp","propName","targetValue","filter","toLowerCase","filterItemsByKeyword","keyword","includes","getFilterProps","length","propsList","Set","add","sort","stripDamageTypeTags","data","scrubItemData","scrubbedItems","match","useItemsData","category","processingFunctions","useState","setItems","loading","setLoading","setError","useEffect","axios","get","then","response","itemData","JSON","stringify","parse","fn","catch","ResultsCount","count","LoadingSpinner","span","LoadingIndicator","GenericItem","description","imageName","descriptionOutput","undefined","trim","ItemFigure","style","backgroundImage","ArcaneCard","levelStats","ranks","Ranks","Array","isArray","entries","idx","Arcanes","itemDataController","ItemDetailCard","Archwing","abilities","Abilities","ability","Ability","Archwings","keywordFilter","setKeywordFilter","type","placeholder","value","onChange","e","target","onClick","ModCard","StyledFusionLevels","ItemFilter","defaultOption","options","option","ModList","mod","modKey","fusionLimit","Mod","rarity","uniqueName","FusionLevels","apply","modLevels","maxModLevelIndex","maxModLevelStats","stat","Mods","itemsCount","filteredItems","setFilteredItems","polarityFilter","setPolarityFilter","rarityFilter","setRarityFilter","typeFilter","setTypeFilter","polarityFilterOptions","setPolarityFilterOptions","typeFilterOptions","setTypeFilterOptions","rarityFilterOptions","setRarityFilterOptions","modPolarities","modTypes","modRarities","slice","modFilters","event","RangedWeapons","component","itemsLength","weaponTypeFilter","setWeaponTypeFilter","masteryRankFilter","setMasteryRankFilter","noiseLevelFilter","setNoiseLevelFilter","masteryRankFilterOptions","setMasteryRankFilterOptions","noiseLevelFilterOptions","setNoiseLevelFilterOptions","mastery","a","b","noise","parseInt","filters","PrimaryWeapon","PrimaryWeapons","SecondaryWeapon","SecondaryWeapons","ItemBuildComponent","SentinelCard","armor","components","ManufacturingRequirements","ManufacturingRequirement","itemCount","pages","totalItemCount","setTotalItemCount","CategoryOptions","itemCategory","App","setCategory","basename","to","htmlFor","route","RouteWithSubRoutes","key","path","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec483cd4.chunk.js","sourcesContent":["export const itemCategories = [\n    'Arcanes',\n    'Archwing',\n    'Arch-Gun',\n    'Arch-Melee',\n    'Fish',\n    'Gear',\n    'Glyphs',\n    'Melee',\n    'Misc',\n    'Mods',\n    'Pets',\n    'Primary',\n    'Quests',\n    'Relics',\n    'Resources',\n    'Secondary',\n    'Sentinels',\n    'Skins',\n    'Warframes'\n];\n","import styled from 'styled-components';\n\nconst StyledFilters = styled.section`\n    border: 1px solid #7F7A82;\n    border-left:4px solid;\n    border-radius:4px;\n    background: #28282A;\n    color: #FFF;\n    margin: 10px;\n    padding: 1em;\n\n    button,\n    input,\n    select {\n        border-radius: 10px;\n        margin: 0 10px;\n        padding: 0.5em 1em;\n    }\n\n    button {\n        background-color: #F1E9B3;\n        cursor: pointer;\n    }\n`\n\nexport default StyledFilters;\n","import styled from 'styled-components';\n\nconst ItemCard = styled.li`\n    background: #070713;\n    border: 1px solid #B5924E;\n    border-bottom: 10px solid #F1E9B3;\n    border-radius: 5px;\n    box-shadow: inset 0 0 100px rgba(199,178,110,0.3);\n    color: #F8F5CB;\n    flex-basis: 256px;\n    margin: 10px;\n    max-width: 256px;\n    overflow:hidden;\n    position: relative;\n    text-align: center;\n\n    h1 {\n        padding: 0 0.5em;\n    }\n\n    p {\n        padding: 1em;\n    }\n`;\n\nconst ItemMain = styled.main`\n    padding: 1em;\n\n    @media (min-width: 1024px) {\n        flex-wrap: nowrap;\n    }\n`\nexport { ItemMain, ItemCard };\n","import styled from \"styled-components\";\n\nconst StyledArcanerank = styled.div`\n    .rank-container {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n    }\n\n    .rank-outer {\n        border: 2px solid #C7C5A8;\n        height: 1.5em;\n        transform: rotate(45deg);\n        width: 1.5em;\n        text-align: center;\n    }\n\n    .rank-inner {\n        height: 1.5em;\n        width: 1.5em;\n        line-height: 1.5em;\n        transform: rotate(-45deg);\n    }\n\n    .description {\n        padding: 1em;\n    }\n`\n\nconst ArcaneRank = (props) => {\n    const level = props[0];\n    const levelDescription = props[1].stats[0];\n    return (\n        <StyledArcanerank>\n\n            <div className=\"rank-container\">\n                <div className=\"rank-outer\">\n                    <div className=\"rank-inner\">{level}</div>\n                </div>\n\n                <div className=\"description\">\n                    {levelDescription}\n                </div>\n            </div>\n        </StyledArcanerank>\n    )\n}\n\nexport default ArcaneRank;\n","import styled from 'styled-components';\n\nconst StyledItemList = styled.ul`\n    display: flex;\n    list-style-type: none;\n    flex-wrap: wrap;\n    justify-content: center;\n`\n\nexport default StyledItemList;","import axios from 'axios';\nimport React, {useEffect, useState} from 'react';\n\nexport const CDNBase = 'https://cdn.warframestat.us/img/';\n\n/**\n * Some categories of item (e.g. Fish) have multiple entries for a single type of item to accomodate\n * for item size variations.  This would clutter up the search results, so there needs to be a method\n * for removing duplicate items.\n *\n * @param {array} items\n */\nfunction deDupeItems(items) {\n    let deDupedItems = {};\n    // TODO: Change from an array search to a hashmap.\n    items.forEach((item) => {\n        if (!deDupeItems.hasOwnProperty(item.name)) {\n            deDupedItems[item.name] = item;\n        }\n    })\n    return Object.values(deDupedItems);\n}\n\nexport function listItems(items, componentName, itemKey = 'uniqueName') {\n    if (!items) {\n        return [];\n    }\n\n    return items.map(item => {\n        const Component = componentName;\n        return (\n            <Component key={item[itemKey]} {...item}/>\n        )\n    })\n}\n\nexport function stripPhTag(string) {\n    return string.replace(/\\[Ph\\]/gi, '');\n}\n\nexport function stripLineSeparatorTags(string) {\n    const regex = /<LINE_SEPARATOR>/gi\n    return string.replace(regex, '');\n}\n\nexport function filterItemsByProp(items, propName, targetValue) {\n    return items.filter(item => {\n        switch (typeof item[propName]) {\n            case 'string':\n                return item[propName].toLowerCase() === targetValue.toLowerCase();\n            case 'number':\n                return item[propName] === targetValue;\n            default:\n                return false;\n        }\n    })\n}\n\nexport function filterItemsByKeyword(items, keyword) {\n    return items.filter(item => {\n        return item.name.toLowerCase().includes(keyword.toLowerCase());\n    })\n}\n\n/**\n * Populate an array of properties than can be used to filter Mods.\n *\n * @param {array} mods\n * @param {string} propName\n */\nexport function getFilterProps(items, propName) {\n    if (!items || !items.length) {\n        return [];\n    }\n\n    let propsList = new Set();\n\n    items.forEach(item => {\n        switch(typeof item[propName]) {\n            case 'string':\n                if (item[propName].length) {\n                    propsList.add(item[propName])\n                }\n                break;\n            default:\n                propsList.add(item[propName])\n                break;\n        }\n    });\n\n    return [...propsList].sort();\n}\n\nexport async function getItemDataByCategory(category) {\n    const dataFileUrl = `${window.location.href}/data/${category}.json`;\n    axios.get(dataFileUrl)\n        .then(response => {\n            return response.text();\n        })\n        .then(response => {\n            response = stripLineSeparatorTags(response);\n            response = stripDamageTypeTags(response);\n            return JSON.parse(response);\n        })\n        .catch((error) => {\n            console.error('Error:', error);\n        });\n}\n\nexport function stripDamageTypeTags(data) {\n    const regex = /<DT_([a-z]*)>/gi\n    return data.replace(regex, '');\n}\n\nfunction scrubItemData(items) {\n    let scrubbedItems = {};\n    items.forEach((item) => {\n        if (!item.name.match(/\\/Lotus\\/Language\\//gi)) {\n            scrubbedItems[item.name] = item;\n        }\n    })\n    return Object.values(scrubbedItems);\n\n}\n\nexport function useItemsData(category, processingFunctions = []) {\n    const [items, setItems] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        setLoading(true);\n        axios.get(`/warframe-dashboard/data/${category}.json`)\n            .then(response => {\n                let itemData = JSON.stringify(response.data);\n                itemData = stripDamageTypeTags(itemData);\n                itemData = stripLineSeparatorTags(itemData);\n                itemData = stripPhTag(itemData);\n                itemData = JSON.parse(itemData);\n                itemData = deDupeItems(itemData);\n                itemData = scrubItemData(itemData);\n\n                if (processingFunctions) {\n                    processingFunctions.forEach(fn => {\n                        itemData = fn(itemData)\n                    })\n                }\n\n                setItems(itemData);\n                setLoading(false);\n            })\n            .catch(setError);\n    }, [category]);\n\n    return [items, loading];\n}\n\nexport function validItemsList(items, category) {\n    return items.length && items[0].category.toLowerCase() === category;\n}\n","import styled from 'styled-components';\n\nexport function ResultsCount(props) {\n    return (\n        <span>Found {props.count} results</span>\n    )\n}\n\nconst LoadingSpinner = styled.span`\n    background: url('/warframe-dashboard/img/loading-gear.gif') left center no-repeat;\n    background-size: auto 100%;\n    padding-left: 30px;\n`\n\nexport function LoadingIndicator() {\n    return (\n        <LoadingSpinner>\n            Loading...\n        </LoadingSpinner>\n    )\n}\n","import React, {useEffect, useState} from 'react';\nimport { ItemCard } from './ItemCard';\nimport StyledItemList from './StyledItemList';\nimport StyledFilters from './StyledSubFilters';\nimport * as itemDataController from '../controllers/itemDataController';\n\nimport {\n    LoadingIndicator,\n    ResultsCount\n} from './filters/filterComponents'\n\nconst GenericItems = ({category}) => {\n    const [items, loading] = itemDataController.useItemsData(category);\n    const [totalItemCount, setTotalItemCount] = useState(0);\n    let [filteredItems, setFilteredItems] = useState([]);\n    const [keywordFilter, setKeywordFilter] = useState('')\n\n    // Set filtered items once items has loaded an initial data set.\n    useEffect(() => {\n        setFilteredItems(items);\n        setTotalItemCount(items.length)\n    }, [loading])\n\n    // Update the filtered items list when the keyword filter is updated.\n    useEffect(() => {\n        let filteredItems = [...items];\n\n        if (keywordFilter) {\n            filteredItems = itemDataController.filterItemsByKeyword(filteredItems, keywordFilter);\n        }\n\n        setFilteredItems(filteredItems);\n    }, [keywordFilter])\n\n    const resetFilters = () => {\n        setKeywordFilter('');\n    }\n\n    return (\n        <>\n            <StyledFilters>\n                <input type=\"text\" placeholder=\"keyword\" name=\"keyword\" value={keywordFilter} onChange={(e) => setKeywordFilter(e.target.value)}/>\n                <button onClick={resetFilters}>Reset filters</button>\n                {\n                    !loading && totalItemCount > 0 ? <ResultsCount count={filteredItems.length} /> : <LoadingIndicator />\n                }\n            </StyledFilters>\n\n            <StyledItemList>\n                {\n                    loading ? 'Loading...' : itemDataController.listItems(filteredItems, GenericItem)\n                }\n            </StyledItemList>\n        </>\n    )\n}\n\nconst GenericItem = ({description, imageName, name}) => {\n    const descriptionOutput = description !== undefined && description.length ? <p>{description.trim()}</p>: null;\n\n    return (\n        <ItemCard>\n            <ItemFigure imageName={imageName}/>\n            <h1>{name}</h1>\n            {descriptionOutput}\n        </ItemCard>\n    )\n}\n\nconst ItemFigure = ({imageName}) => {\n    return (\n        <figure className='styled-figure' style={{ backgroundImage: 'url(' + itemDataController.CDNBase + imageName + ')' }}/>\n    )\n}\n\nexport { GenericItems, ItemFigure, ResultsCount } ;","import { ItemMain, ItemCard } from '../ItemCard';\nimport ArcaneRank from './ArcaneRank';\nimport StyledFilters from '../StyledSubFilters';\nimport StyledItemList from '../StyledItemList';\nimport { ItemFigure, ResultsCount } from '../GenericItem';\nimport * as itemDataController from '../../controllers/itemDataController';\n\nfunction Arcanes({category}) {\n    const [items, loading] = itemDataController.useItemsData(category);\n\n    return (\n        <>\n            <StyledFilters>\n                <ResultsCount count={items.length}/>\n            </StyledFilters>\n\n            <StyledItemList>\n                {itemDataController.listItems(items, ArcaneCard)}\n            </StyledItemList>\n        </>\n    )\n}\n\nconst ArcaneCard = ({levelStats, imageName, name}) => {\n    if (name === 'Arcane') {\n        return null;\n    }\n\n    return (\n        <ItemCard>\n            <ItemFigure imageName={imageName}/>\n            <ItemMain>\n                <h1>{name}</h1>\n                <div className=\"item-details\">\n                    <Ranks ranks={levelStats} />\n                </div>\n            </ItemMain>\n        </ItemCard>\n    )\n}\n\nconst Ranks = ({ranks}) => {\n    if (ranks === undefined) {\n        return null;\n    }\n\n    const levels = Array.isArray(Object.entries(ranks)) ? Object.entries(ranks) : [];\n    const rankDetails = levels.map((level, idx) => {\n        return <ArcaneRank key={idx} {...level} />\n    })\n\n    return rankDetails\n}\n\nexport default Arcanes;\n","import styled from 'styled-components';\n\nconst ItemDetailCard = styled.div`\n    border: 1px solid #7F7A82;\n    border-left:4px solid;\n    border-radius:4px;\n    background: #28282A;\n    margin: 0 0 1em;\n    padding: 1em;\n\n    h2 {\n        margin: 0;\n    }\n`\n\nexport default ItemDetailCard;\n","import React, {useState} from 'react';\nimport { ItemCard } from '../ItemCard';\nimport ItemDetailCard from '../ItemDetailCard';\nimport * as itemDataController from '../../controllers/itemDataController';\nimport { ItemFigure, ResultsCount } from '../GenericItem';\nimport StyledItemList from '../StyledItemList';\nimport StyledFilters from '../StyledSubFilters';\n\nfunction Archwings(props) {\n    const [items, loading] = itemDataController.useItemsData(props.category);\n    const [keywordFilter, setKeywordFilter] = useState('')\n\n    const resetFilters = () => {\n        setKeywordFilter('');\n    }\n\n    return (\n        <>\n            <StyledFilters>\n                <input type=\"text\" placeholder=\"keyword\" name=\"keyword\" value={keywordFilter} onChange={(e) => setKeywordFilter(e.target.value)}/>\n                <button onClick={resetFilters}>Reset filters</button>\n                <ResultsCount count={items.length} loading={loading}/>\n            </StyledFilters>\n\n            <StyledItemList>\n                {\n                    loading ? 'Loading...' : itemDataController.listItems(items, Archwing)\n                }\n            </StyledItemList>\n        </>\n    )\n}\n\nconst Archwing = ({abilities, description, imageName, name}) => {\n    return (\n        <ItemCard>\n            <ItemFigure imageName={imageName}/>\n            <h1>{name}</h1>\n            <p>{description}</p>\n            <h3>Abilities</h3>\n            <Abilities abilities={abilities} />\n        </ItemCard>\n    )\n}\n\nconst Abilities = ({abilities}) => {\n    if (abilities === undefined) {\n        return null;\n    }\n\n    return abilities.map((ability) => {\n        return <Ability key={ability.name} {...ability} />\n    })\n}\n\nconst Ability = ({description, name}) => {\n    return (\n        <ItemDetailCard key={name}>\n            <h2>{name}</h2>\n            <p>{description}</p>\n        </ItemDetailCard>\n    )\n}\n\nexport default Archwings;\n","import styled from 'styled-components';\nimport { ItemCard } from '../ItemCard';\n\nconst ModCard = styled(ItemCard)`\n    display:flex;\n    justify-content: space-evenly;\n    flex-direction: column;\n    justify-content: space-between;\n\n    figure {\n        width: 100%;\n        height: 256px;\n    }\n\n    .stat {\n        padding: 2px 10px;\n    }\n\n    @media only screen and (max-width: 512px) {\n        flex-basis: 100%;\n\n        .figure {\n            height: auto;\n        }\n    }\n\n    &.common {\n        border-color: #9E7A5A #9E7A5A #DBB592\n    }\n\n    &.uncommon {\n        border-color: #BABABE #BABABE #FAFAFC\n    }\n\n    &.rare {\n        border-color: #B5924E #B5924E #F1E9B3\n    }\n`\n\nconst StyledFusionLevels = styled.ul`\n    display: flex;\n    gap: 0.5em;\n    justify-content: center;\n    list-style-type: none;\n    flex-wrap: wrap;\n    margin: 1em;\n\n    li {\n        border: 1px solid #5194B6;\n        background-color: #C2F2FF;\n        border-radius: 50%;\n        width: 8px;\n        height: 8px;\n    }\n`\n\nexport { ModCard, StyledFusionLevels }","const ItemFilter = (props) => {\n    return (\n        <select name={props.name} value={props.value} onChange={props.onChange}>\n            <option key=\"default\" value=\"\">-- {props.defaultOption} --</option>;\n            {\n                props.options.map((option) => <option key={option} value={option}>{option}</option>)\n            }\n        </select>\n    )\n}\n\nexport default ItemFilter\n","import React, {useEffect, useState} from 'react';\nimport { ItemFigure } from '../GenericItem';\nimport { ModCard, StyledFusionLevels } from './ModStyles';\nimport ItemFilter from '../ItemFilter';\nimport StyledItemList from '../StyledItemList';\nimport * as itemDataController from '../../controllers/itemDataController';\nimport StyledFilters from '../StyledSubFilters';\n\n\nimport {\n    LoadingIndicator,\n    ResultsCount\n} from '../filters/filterComponents'\n\nfunction Mods({category}) {\n    const scrubbedModData = (mods) => {\n        let deDupedMods = {};\n        mods.forEach(mod => {\n            const modLookupKey = `${mod.name}-fusion-levels-${mod.fusionLimit}`\n            if (!deDupedMods.hasOwnProperty(modLookupKey) && mod.levelStats) {\n                deDupedMods[modLookupKey] = mod;\n            }\n        })\n        return Object.values(deDupedMods);\n    }\n\n    const [items, loading] = itemDataController.useItemsData(category);\n    const itemsCount = items.length;\n\n    let [filteredItems, setFilteredItems] = useState([]);\n\n    // Currently active filters\n    const [keywordFilter, setKeywordFilter] = useState('')\n    const [polarityFilter, setPolarityFilter] = useState('');\n    const [rarityFilter, setRarityFilter] = useState('');\n    const [typeFilter, setTypeFilter] = useState('');\n\n    // Filter options\n    const [polarityFilterOptions, setPolarityFilterOptions] = useState([]);\n    const [typeFilterOptions, setTypeFilterOptions] = useState([]);\n    const [rarityFilterOptions, setRarityFilterOptions] = useState([]);\n\n    useEffect(() => {\n        const modPolarities = itemDataController.getFilterProps(items, 'polarity');\n        setPolarityFilterOptions(modPolarities);\n\n        const modTypes = itemDataController.getFilterProps(items, 'type');\n        setTypeFilterOptions(modTypes);\n\n        const modRarities = itemDataController.getFilterProps(items, 'rarity');\n        setRarityFilterOptions(modRarities);\n\n        setFilteredItems(items);\n    }, [itemsCount])\n\n    useEffect(() => {\n        let filteredItems = [...items];\n\n        const noActiveFilters = !polarityFilter && !rarityFilter && !typeFilter && !keywordFilter;\n        if (noActiveFilters) {\n            setFilteredItems(filteredItems ? filteredItems.slice(0, 99) : []);\n            return;\n        }\n\n        if (polarityFilter) {\n            filteredItems = itemDataController.filterItemsByProp(filteredItems, 'polarity', polarityFilter);\n        }\n\n        if (rarityFilter) {\n            filteredItems = itemDataController.filterItemsByProp(filteredItems, 'rarity', rarityFilter);\n        }\n\n        if (typeFilter) {\n            filteredItems = itemDataController.filterItemsByProp(filteredItems, 'type', typeFilter);\n        }\n\n        if (keywordFilter) {\n            filteredItems = itemDataController.filterItemsByKeyword(filteredItems, keywordFilter);\n        }\n        setFilteredItems(filteredItems);\n    }, [keywordFilter, polarityFilter, rarityFilter, typeFilter])\n\n    const resetFilters = () => {\n        setKeywordFilter('');\n        setPolarityFilter('');\n        setRarityFilter('');\n        setTypeFilter('');\n    }\n\n    const modFilters = [\n        {\n            defaultOption: 'Polarity',\n            options: polarityFilterOptions,\n            value: polarityFilter,\n            onChange: (event) => {\n                setPolarityFilter(event.target.value);\n            }\n        },\n        {\n            defaultOption: 'Type',\n            options: typeFilterOptions,\n            value: typeFilter,\n            onChange: (event) => {\n                setTypeFilter(event.target.value);\n            }\n        },\n        {\n            defaultOption: 'Rarity',\n            options: rarityFilterOptions,\n            value: rarityFilter,\n            onChange: (event) =>  {\n                setRarityFilter(event.target.value);\n            }\n        }\n    ]\n\n    return (\n        <>\n        <StyledFilters>\n            <label>Filter mods by:</label>\n            {\n                modFilters.map(filter => {\n                    return (\n                        <ItemFilter\n                            key={filter.defaultOption}\n                            defaultOption={filter.defaultOption}\n                            name={filter.name}\n                            onChange={filter.onChange}\n                            options={filter.options}\n                            value={filter.value}\n                        />\n                    )\n                })\n            }\n            <input type=\"text\" placeholder=\"keyword\" name=\"keyword\" value={keywordFilter} onChange={(e) => setKeywordFilter(e.target.value)}/>\n            <button onClick={resetFilters}>Reset filters</button>\n\n            {\n                !loading && items.length > 0 ? <ResultsCount count={filteredItems.length} /> : <LoadingIndicator loading={loading} />\n            }\n        </StyledFilters>\n\n        <StyledItemList>\n            <ModList items={filteredItems}/>\n        </StyledItemList>\n        </>\n    )\n}\n\nconst ModList = ({items}) => {\n    if (!items) {\n        return [];\n    }\n\n    return items.map(mod => {\n        const modKey = `${mod.name}-limit-${mod.fusionLimit}`;\n        return (\n            <Mod key={modKey} {...mod}/>\n        )\n    })\n}\n\nconst Mod = ({ fusionLimit, imageName, levelStats, name, rarity, uniqueName}) => {\n\n    const FusionLevels = (props) => {\n        let fusionLimit = Array.apply(null, Array(props.fusionLimit));\n        fusionLimit = fusionLimit.map((value, idx) => {\n            return <li key={idx}></li>\n        })\n\n        return <StyledFusionLevels>{fusionLimit}</StyledFusionLevels>\n    }\n\n    const modLevels = levelStats;\n    const maxModLevelIndex = modLevels !== undefined ? modLevels.length - 1 : null;\n    let maxModLevelStats = maxModLevelIndex ? modLevels[maxModLevelIndex].stats : [];\n    maxModLevelStats = maxModLevelStats.map((stat, idx) => <div className=\"stat\" key={idx}>{stat}</div>)\n\n    return (\n        <ModCard key={uniqueName} className={rarity.toLowerCase()}>\n            <ItemFigure imageName={imageName}/>\n            <h1>{name}</h1>\n            {maxModLevelStats}\n            <FusionLevels fusionLimit={fusionLimit}/>\n        </ModCard>\n    )\n}\n\nexport default Mods;","import React, {useEffect, useState} from 'react';\nimport * as itemDataController from '../../controllers/itemDataController';\nimport ItemFilter from '../ItemFilter';\nimport { ResultsCount } from '../GenericItem';\nimport StyledItemList from '../StyledItemList';\nimport StyledFilters from '../StyledSubFilters';\n\nconst RangedWeapons = ({category, component}) => {\n    const [items, loading] = itemDataController.useItemsData(category);\n    const itemsLength = items.length;\n    const [filteredItems, setFilteredItems] = useState([])\n\n    // Currently active filters\n    const [keywordFilter, setKeywordFilter] = useState('')\n    const [weaponTypeFilter, setWeaponTypeFilter] = useState('')\n    const [masteryRankFilter, setMasteryRankFilter] = useState('');\n    const [noiseLevelFilter, setNoiseLevelFilter] = useState('');\n\n    // Filter options\n    const [masteryRankFilterOptions, setMasteryRankFilterOptions] = useState([]);\n    const [noiseLevelFilterOptions, setNoiseLevelFilterOptions] = useState([]);\n    const [typeFilterOptions, setTypeFilterOptions] = useState([]);\n\n    const resetFilters = () => {\n        setKeywordFilter('');\n        setWeaponTypeFilter('');\n        setMasteryRankFilter('');\n        setNoiseLevelFilter('');\n    }\n\n    useEffect(() => {\n        const mastery = itemDataController.getFilterProps(items, 'masteryReq').sort((a, b) => a - b);\n        const noise = itemDataController.getFilterProps(items, 'noise');\n        const type = itemDataController.getFilterProps(items, 'type')\n\n        setMasteryRankFilterOptions(mastery);\n        setNoiseLevelFilterOptions(noise);\n        setTypeFilterOptions(type);\n\n        // Once items has been populated, set it as the default content for filteredItems\n        setFilteredItems(items);\n    }, [itemsLength])\n\n    useEffect(() => {\n        let filteredItems = [...items];\n\n        if (masteryRankFilter) {\n            filteredItems = itemDataController.filterItemsByProp(filteredItems, 'masteryReq', parseInt(masteryRankFilter));\n        }\n\n        if (noiseLevelFilter) {\n            filteredItems = itemDataController.filterItemsByProp(filteredItems, 'noise', noiseLevelFilter);\n        }\n\n        if (weaponTypeFilter) {\n            filteredItems = itemDataController.filterItemsByProp(filteredItems, 'type', weaponTypeFilter);\n        }\n\n        if (keywordFilter) {\n            filteredItems = itemDataController.filterItemsByKeyword(filteredItems, keywordFilter);\n        }\n\n        setFilteredItems(filteredItems);\n    }, [keywordFilter, masteryRankFilter, noiseLevelFilter, weaponTypeFilter])\n\n    const filters = [\n        {\n            defaultOption: 'Weapon type',\n            options: typeFilterOptions,\n            value: weaponTypeFilter,\n            onChange: (event) => {\n                setWeaponTypeFilter(event.target.value);\n            }\n        },\n        {\n            defaultOption: 'Noise Level',\n            options: noiseLevelFilterOptions,\n            value: noiseLevelFilter,\n            onChange: (event) => {\n                setNoiseLevelFilter(event.target.value);\n            }\n        },\n        {\n            defaultOption: 'Mastery Rank required',\n            options: masteryRankFilterOptions,\n            value: masteryRankFilter,\n            onChange: (event) =>  {\n                setMasteryRankFilter(event.target.value);\n            }\n        }\n    ]\n\n    return (\n        <>\n        <StyledFilters>\n            <label>Filter weapons by:</label>\n            {\n                filters.map(filter => {\n                    return (\n                        <ItemFilter\n                            key={filter.defaultOption}\n                            defaultOption={filter.defaultOption}\n                            name={filter.name}\n                            onChange={filter.onChange}\n                            options={filter.options}\n                            value={filter.value}\n                        />\n                    )\n                })\n            }\n            <input type=\"text\" placeholder=\"keyword\" name=\"keyword\" value={keywordFilter} onChange={(e) => setKeywordFilter(e.target.value)}/>\n            <button onClick={resetFilters}>Reset filters</button>\n            <ResultsCount count={filteredItems.length}/>\n        </StyledFilters>\n\n        <StyledItemList>\n            {itemDataController.listItems(filteredItems, component)}\n        </StyledItemList>\n        </>\n    )\n}\n\nexport default RangedWeapons;","import React from 'react';\nimport { ItemFigure } from '../GenericItem';\nimport { ItemCard } from '../ItemCard';\nimport RangedWeapons from './RangedWeapons';\n\nconst PrimaryWeapons = ({category}) => {\n    return <RangedWeapons category={category} component={PrimaryWeapon}/>\n}\n\nconst PrimaryWeapon = ({description, imageName, name}) => {\n    return (\n        <ItemCard>\n            <ItemFigure imageName={imageName}/>\n            <h1>{name}</h1>\n            <p>{description}</p>\n        </ItemCard>\n    )\n}\n\nexport default PrimaryWeapons;\n","import React from 'react';\nimport { ItemFigure } from '../GenericItem';\nimport { ItemCard } from '../ItemCard';\nimport RangedWeapons from './RangedWeapons';\n\nconst SecondaryWeapons = ({category}) => {\n    return <RangedWeapons category={category} component={SecondaryWeapon}/>\n}\n\nconst SecondaryWeapon = ({description, imageName, name}) => {\n    return (\n        <ItemCard>\n            <ItemFigure imageName={imageName}/>\n            <h1>{name}</h1>\n            <p>{description}</p>\n        </ItemCard>\n    )\n}\n\nexport default SecondaryWeapons;\n","import styled from \"styled-components\";\n\nconst ItemBuildComponent = styled.div`\n    box-sizing: border-box;\n    display: inline-block;\n    max-width: 20%;\n    padding: 1em;\n`;\n\nexport default ItemBuildComponent;","import { ItemFigure, ResultsCount } from '../GenericItem';\nimport { ItemCard } from '../ItemCard';\nimport ItemDetailCard from '../ItemDetailCard';\nimport StyledItemList from '../StyledItemList';\nimport StyledFilters from '../StyledSubFilters';\nimport ItemBuildComponent from '../ItemBuildComponent';\nimport * as itemDataController from '../../controllers/itemDataController';\n\nconst Sentinels = ({category}) => {\n    const items = itemDataController.useItemsData(category);\n\n    return (\n        <>\n            <StyledFilters>\n                <ResultsCount count={items.length}/>\n            </StyledFilters>\n            <StyledItemList>\n                {itemDataController.listItems(items, SentinelCard)}\n            </StyledItemList>\n        </>\n    )\n}\n\nconst SentinelCard = ({armor, components, description, imageName, name}) => {\n    return (\n        <ItemCard>\n            <ItemFigure imageName={imageName}/>\n            <h1>{name}</h1>\n            <p>{description}</p>\n            <p>Armor: {armor}</p>\n            <h3>Manufacturing Requirements</h3>\n            <ManufacturingRequirements components={components} />\n        </ItemCard>\n    )\n}\n\nconst ManufacturingRequirements = ({components, uniqueName}) => {\n    if (components === undefined) {\n        return null;\n    }\n\n    components = Object.entries(components);\n\n    return (\n        <ItemDetailCard key={uniqueName}>\n            {\n                components.map((component) => {\n                    return (\n                        <ManufacturingRequirement key={component[1].uniqueName} {...component} />\n                    )\n                })\n            }\n        </ItemDetailCard>\n    )\n}\n\nconst ManufacturingRequirement = (props) => {\n    const description = props[1].description;\n    return (\n        <ItemBuildComponent>\n            <p>{props[1].name} x {props[1].itemCount}</p>\n        </ItemBuildComponent>\n    )\n}\n\nexport default Sentinels;\n","import Arcanes from '../Components/arcane/Arcane';\nimport Archwings from '../Components/archwing/Archwing';\nimport { GenericItems } from '../Components/GenericItem';\nimport Homepage from '../Components/homepage/Homepage';\nimport Mods from '../Components/mod/Mods';\nimport PrimaryWeapons from '../Components/ranged-weapons/PrimaryWeapons';\nimport SecondaryWeapons from '../Components/ranged-weapons/SecondaryWeapons';\nimport Sentinels from '../Components/sentinel/Sentinels';\n\nexport const pages = [\n    {\n      'path': '/arcanes',\n      'component': Arcanes,\n    },\n    {\n      'path': '/archwing',\n      'component': Archwings,\n    },\n    {\n      'path': '/mods',\n      'component': Mods,\n    },\n    {\n      'path': '/primary',\n      'component': PrimaryWeapons,\n    },\n    {\n      'path': '/secondary',\n      'component': SecondaryWeapons,\n    },\n    {\n      'path': '/sentinels',\n      'component': Sentinels,\n    },\n    {\n      'path': '/',\n      'component': Homepage,\n      'exact': true,\n    },\n    {\n      'path': '/:generic',\n      'component': GenericItems,\n    }\n  ]","export default function Homepage() {\n    return (\n        <>\n            <h2>Homepage</h2>\n        </>\n    )\n}","/**\n * Huge credit and thanks to the Warframe community\n * https://github.com/WFCD\n * https://github.com/WFCD/warframe-items\n */\n import React, {useEffect, useState} from 'react';\nimport ReactDOM  from 'react-dom';\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nimport './index.css';\nimport { itemCategories } from './Components/item-categories';\nimport StyledFilters from './Components/StyledSubFilters';\nimport { pages } from './controllers/pagesController';\n\nconst CategoryOptions = () => {\n  return (\n    <>\n    <option value=''>-- Category --</option>\n    {\n      itemCategories.map(itemCategory => {\n        return <option key={itemCategory} value={itemCategory}>{itemCategory}</option>\n      })\n    }\n    </>\n  )\n}\n\nconst App = () => {\n  const [category, setCategory] = useState('');\n\n  return (\n    <Router basename=\"/warframe-dashboard\">\n      <Redirect to={category.toLowerCase()} />\n      <StyledFilters>\n          <label htmlFor=\"category\">Select an item category</label>\n          <select name=\"category\" value={category} onChange={(e) => setCategory(e.target.value)}>\n            <CategoryOptions/>\n          </select>\n\n      </StyledFilters>\n\n      <Switch>\n        {\n          pages.map((route) => {\n            return <RouteWithSubRoutes {...route} key={category.toLowerCase()} category={category} />\n          })\n        }\n      </Switch>\n    </Router>\n  )\n}\n\n// A special wrapper for <Route> that knows how to\n// handle \"sub\"-routes by passing them in a `routes`\n// prop to the component it renders.\nfunction RouteWithSubRoutes(route) {\n  return (\n    <Route\n      path={route.path}\n      render={props => (\n        // pass the sub-routes down to keep nesting\n        <route.component {...props} {...route} />\n      )}\n    />\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}